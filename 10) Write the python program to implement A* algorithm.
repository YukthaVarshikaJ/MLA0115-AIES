A* Algorithm

ALGORITHM:
1.Initialize: Start from the initial state, define the goal, and create open and closed lists.
2.Generate Successors: Create possible moves from the current state.
3.Evaluate Cost: Compute the cost (g) and heuristic (h) for each successor.
4.Select Node: Choose the node with the lowest f = g + h from the open list.
5.Check for Goal: If the node is the goal, return the path.

PROGRAM:
import heapq
def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])
def astar(grid, start, goal):
    rows, cols = len(grid), len(grid[0])
    open_set = [(0 + heuristic(start, goal), 0, start)]
    came_from = {}
    cost_so_far = {start: 0}
    while open_set:
        _, current_cost, current = heapq.heappop(open_set)
        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            return path[::-1] + [goal]
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            neighbor = (current[0] + dx, current[1] + dy)
            if 0 <= neighbor[0] < rows and 0 <= neighbor[1] < cols and grid[neighbor[0]][neighbor[1]] == 0:
                new_cost = current_cost + 1
                if neighbor not in cost_so_far or new_cost < cost_so_far[neighbor]:
                    cost_so_far[neighbor] = new_cost
                    priority = new_cost + heuristic(neighbor, goal)
                    heapq.heappush(open_set, (priority, new_cost, neighbor))
                    came_from[neighbor] = current
    return []
def print_grid(grid, path):
    path_set = set(path)
    for i, row in enumerate(grid):
        for j, cell in enumerate(row):
            if (i, j) == path[0]: print('S', end=' ')
            elif (i, j) == path[-1]: print('G', end=' ')
            elif (i, j) in path_set: print('.', end=' ')
            else: print('#' if cell == 1 else ' ', end=' ')
        print()
def main():
    grid = [
        [0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0]
    ]
    start, goal = (0, 0), (4, 4)
    path = astar(grid, start, goal)
    if path:
        print("Path found:")
        print_grid(grid, path)
    else:
        print("No path found.")
if __name__ == "__main__":
    main()
